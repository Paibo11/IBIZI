import tkinter as tk
from tkinter import messagebox, simpledialog
import json
import os
import time
import itertools
import string

USER_DATA_FILE = 'user_data.json'

def load_user_data():
    if os.path.exists(USER_DATA_FILE):
        with open(USER_DATA_FILE, 'r') as file:
            return json.load(file)
    else:
        return {'ADMIN': {'password': 'admin123', 'blocked': False, 'password_restrictions': None}}

def save_user_data(data):
    with open(USER_DATA_FILE, 'w') as file:
        json.dump(data, file, indent=4)

class LoginApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Вход в систему")
        self.root.geometry("300x250")
        self.user_data = load_user_data()
        self.is_brute_forcing = False  # Флаг для остановки перебора
        self.start_time = None  # Время начала перебора

        self.username_label = tk.Label(root, text="Имя пользователя:")
        self.username_label.pack()
        self.username_entry = tk.Entry(root)
        self.username_entry.pack()

        self.password_label = tk.Label(root, text="Пароль:")
        self.password_label.pack()
        self.password_entry = tk.Entry(root, show="*")
        self.password_entry.pack()

        self.login_button = tk.Button(root, text="Войти", command=self.login)
        self.login_button.pack()

        self.brute_force_button = tk.Button(root, text="Подобрать пароль", command=self.brute_force_password)
        self.brute_force_button.pack()

        self.stop_button = tk.Button(root, text="Остановить перебор", command=self.stop_brute_force)
        self.stop_button.pack()
        self.stop_button.config(state=tk.DISABLED)  # Кнопка изначально неактивна

    def login(self):
        username = self.username_entry.get()
        password = self.password_entry.get()

        if username not in self.user_data:
            self.show_error("Пользователь не найден")
            return

        if self.user_data[username]['blocked']:
            self.show_error("Ваш аккаунт заблокирован")
            return

        if self.user_data[username]['password'] == password:
            self.show_success(f"Успешный вход! Пароль: {password}")
            self.stop_brute_force()  # Останавливаем перебор, если пароль найден
            self.root.destroy()
            if username == 'ADMIN':
                admin_root = tk.Tk()
                admin_root.geometry("400x300")
                AdminApp(admin_root, self.user_data)
            else:
                user_root = tk.Tk()
                user_root.geometry("200x100")
                UserApp(user_root, username, self.user_data)
        else:
            self.show_error("Неверный пароль. Попробуйте еще раз.")
            self.password_entry.delete(0, tk.END)  # Очищаем поле ввода пароля

    def brute_force_password(self):
        username = self.username_entry.get()
        if username not in self.user_data:
            self.show_error("Пользователь не найден")
            return

        if self.user_data[username]['blocked']:
            self.show_error("Ваш аккаунт заблокирован")
            return

        method = simpledialog.askstring("Метод подбора", "Выберите метод подбора (dictionary/full):")
        if method == "dictionary":
            self.brute_force_with_dictionary(username)
        elif method == "full":
            self.brute_force_full(username)
        else:
            self.show_error("Неверный метод подбора")

    def brute_force_with_dictionary(self, username):
        dictionary = ["admin", "password", "123456", "qwerty", "1!!qqW"]
        self.is_brute_forcing = True
        self.start_time = time.time()  # Засекаем время начала перебора
        self.stop_button.config(state=tk.NORMAL)  # Активируем кнопку остановки
        self.brute_force_button.config(state=tk.DISABLED)  # Деактивируем кнопку подбора

        for word in dictionary:
            if not self.is_brute_forcing:
                break
            self.password_entry.delete(0, tk.END)
            self.password_entry.insert(0, word)
            self.login()
            self.root.update()  # Обновляем интерфейс
            time.sleep(0.1)  # Задержка для наглядности

        if self.is_brute_forcing:
            elapsed_time = time.time() - self.start_time
            self.show_error(f"Пароль не найден в словаре. Затраченное время: {elapsed_time:.2f} секунд")
        self.stop_brute_force()

    def brute_force_full(self, username):
        alphabet = string.ascii_letters + string.digits + string.punctuation
        self.is_brute_forcing = True
        self.start_time = time.time()  # Засекаем время начала перебора
        self.stop_button.config(state=tk.NORMAL)  # Активируем кнопку остановки
        self.brute_force_button.config(state=tk.DISABLED)  # Деактивируем кнопку подбора

        password_length = 1  # Начинаем с длины 1
        while self.is_brute_forcing:
            for password in itertools.product(alphabet, repeat=password_length):
                if not self.is_brute_forcing:
                    break
                password = ''.join(password)
                self.password_entry.delete(0, tk.END)
                self.password_entry.insert(0, password)
                self.login()
                self.root.update()  # Обновляем интерфейс
                time.sleep(0.1)  # Задержка для наглядности
            password_length += 1  # Увеличиваем длину пароля

        if self.is_brute_forcing:
            elapsed_time = time.time() - self.start_time
            self.show_error(f"Пароль не найден. Затраченное время: {elapsed_time:.2f} секунд")
        self.stop_brute_force()

    def stop_brute_force(self):
        self.is_brute_forcing = False
        self.stop_button.config(state=tk.DISABLED)  # Деактивируем кнопку остановки
        self.brute_force_button.config(state=tk.NORMAL)  # Активируем кнопку подбора

    def show_error(self, message):
        if hasattr(self, 'error_label'):
            self.error_label.config(text=message, fg="red")
        else:
            self.error_label = tk.Label(self.root, text=message, fg="red")
            self.error_label.pack()

    def show_success(self, message):
        if hasattr(self, 'error_label'):
            self.error_label.config(text=message, fg="green")
        else:
            self.error_label = tk.Label(self.root, text=message, fg="green")
            self.error_label.pack()
        elapsed_time = time.time() - self.start_time
        messagebox.showinfo("Успех", f"{message}\nЗатраченное время: {elapsed_time:.2f} секунд")

class AdminApp:
    def __init__(self, root, user_data):
        self.root = root
        self.root.title("Режим администратора")
        self.user_data = user_data

        self.change_password_button = tk.Button(root, text="Сменить пароль администратора", command=self.change_password)
        self.change_password_button.pack()

        self.view_users_button = tk.Button(root, text="Просмотреть список пользователей", command=self.view_users)
        self.view_users_button.pack()

        self.add_user_button = tk.Button(root, text="Добавить нового пользователя", command=self.add_user)
        self.add_user_button.pack()

        self.block_user_button = tk.Button(root, text="Блокировать пользователя", command=self.block_user)
        self.block_user_button.pack()

        self.unblock_user_button = tk.Button(root, text="Разблокировать пользователя", command=self.unblock_user)
        self.unblock_user_button.pack()

        self.set_restrictions_button = tk.Button(root, text="Задать ограничения на пароль", command=self.set_restrictions)
        self.set_restrictions_button.pack()

        self.remove_restrictions_button = tk.Button(root, text="Снять ограничения на пароль", command=self.remove_restrictions)
        self.remove_restrictions_button.pack()

        self.exit_button = tk.Button(root, text="Выйти", command=self.logout)
        self.exit_button.pack()

    def change_password(self):
        old_password = simpledialog.askstring("Смена пароля", "Введите старый пароль:", show='*')
        if old_password == self.user_data['ADMIN']['password']:
            new_password = simpledialog.askstring("Смена пароля", "Введите новый пароль:", show='*')
            confirm_password = simpledialog.askstring("Смена пароля", "Подтвердите новый пароль:", show='*')
            if new_password == confirm_password:
                self.user_data['ADMIN']['password'] = new_password
                save_user_data(self.user_data)
                messagebox.showinfo("Успех", "Пароль успешно изменен")
            else:
                messagebox.showerror("Ошибка", "Пароли не совпадают")
        else:
            messagebox.showerror("Ошибка", "Неверный старый пароль")

    def view_users(self):
        users_info = "\n".join([f"Пользователь: {user}, Блокирован: {info['blocked']}" for user, info in self.user_data.items()])
        messagebox.showinfo("Список пользователей", users_info)

    def add_user(self):
        new_user = simpledialog.askstring("Добавить пользователя", "Введите имя нового пользователя:")
        if new_user in self.user_data:
            messagebox.showerror("Ошибка", "Пользователь уже существует")
        else:
            self.user_data[new_user] = {'password': '', 'blocked': False, 'password_restrictions': None}
            save_user_data(self.user_data)
            messagebox.showinfo("Успех", "Пользователь добавлен")

    def block_user(self):
        user_to_block = simpledialog.askstring("Блокировать пользователя", "Введите имя пользователя для блокировки:")
        if user_to_block in self.user_data:
            self.user_data[user_to_block]['blocked'] = True
            save_user_data(self.user_data)
            messagebox.showinfo("Успех", "Пользователь заблокирован")
        else:
            messagebox.showerror("Ошибка", "Пользователь не найден")

    def unblock_user(self):
        user_to_unblock = simpledialog.askstring("Разблокировать пользователя", "Введите имя пользователя для разблокировки:")
        if user_to_unblock in self.user_data:
            self.user_data[user_to_unblock]['blocked'] = False
            save_user_data(self.user_data)
            messagebox.showinfo("Успех", "Пользователь разблокирован")
        else:
            messagebox.showerror("Ошибка", "Пользователь не найден")

    def set_restrictions(self):
        user_to_set = simpledialog.askstring("Задать ограничения", "Введите имя пользователя:")
        if user_to_set in self.user_data:
            restrictions = {}
            min_length = simpledialog.askinteger("Ограничения", "Минимальная длина пароля:", initialvalue=8)
            if min_length is None:
                min_length = 0
            restrictions['min_length'] = min_length
            restrictions['uppercase'] = messagebox.askyesno("Ограничения", "Требовать заглавные буквы?")
            restrictions['lowercase'] = messagebox.askyesno("Ограничения", "Требовать строчные буквы?")
            restrictions['digits'] = messagebox.askyesno("Ограничения", "Требовать цифры?")
            restrictions['special_chars'] = messagebox.askyesno("Ограничения", "Требовать специальные символы?")
            self.user_data[user_to_set]['password_restrictions'] = restrictions
            save_user_data(self.user_data)
            messagebox.showinfo("Успех", f"Ограничения для пользователя {user_to_set} заданы: {restrictions}")
        else:
            messagebox.showerror("Ошибка", "Пользователь не найден")

    def remove_restrictions(self):
        user_to_remove = simpledialog.askstring("Снять ограничения", "Введите имя пользователя:")
        if user_to_remove in self.user_data:
            self.user_data[user_to_remove]['password_restrictions'] = None
            save_user_data(self.user_data)
            messagebox.showinfo("Успех", f"Ограничения для пользователя {user_to_remove} сняты.")
        else:
            messagebox.showerror("Ошибка", "Пользователь не найден")

    def logout(self):
        self.root.destroy()
        root = tk.Tk()
        app = LoginApp(root)
        root.mainloop()

class UserApp:
    def __init__(self, root, username, user_data):
        self.root = root
        self.root.title("Режим пользователя")
        self.username = username
        self.user_data = user_data

        self.change_password_button = tk.Button(root, text="Сменить пароль", command=self.change_password)
        self.change_password_button.pack()

        self.exit_button = tk.Button(root, text="Выйти", command=self.logout)
        self.exit_button.pack()

    def change_password(self):
        old_password = simpledialog.askstring("Смена пароля", "Введите старый пароль:", show='*')
        if old_password == self.user_data[self.username]['password']:
            new_password = simpledialog.askstring("Смена пароля", "Введите новый пароль:", show='*')
            confirm_password = simpledialog.askstring("Смена пароля", "Подтвердите новый пароль:", show='*')
            if new_password == confirm_password:
                self.user_data[self.username]['password'] = new_password
                save_user_data(self.user_data)
                messagebox.showinfo("Успех", "Пароль успешно изменен")
            else:
                messagebox.showerror("Ошибка", "Пароли не совпадают")
        else:
            messagebox.showerror("Ошибка", "Неверный старый пароль")

    def logout(self):
        self.root.destroy()
        root = tk.Tk()
        app = LoginApp(root)
        root.mainloop()

if __name__ == "__main__":
    root = tk.Tk()
    app = LoginApp(root)
    root.mainloop()
