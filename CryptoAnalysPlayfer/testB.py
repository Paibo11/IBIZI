import re
from collections import defaultdict


def prepare_text(text):
    """Подготовка текста: удаление не-букв, замена j->i, приведение к верхнему регистру"""
    text = re.sub(r'[^a-zA-Z]', '', text).upper()
    return text.replace('J', 'I')


def build_playfair_square(key):
    """Построение квадрата Плейфера по ключу"""
    key = prepare_text(key)
    alphabet = "ABCDEFGHIKLMNOPQRSTUVWXYZ"
    square = []
    used = set()

    for char in key:
        if char not in used and char in alphabet:
            used.add(char)
            square.append(char)

    for char in alphabet:
        if char not in used:
            square.append(char)

    return [square[i * 5:(i + 1) * 5] for i in range(5)]


def decrypt_pair(pair, square, pos_cache):
    """Расшифровка пары символов с кэшем позиций"""
    a, b = pair[0], pair[1]

    # Проверяем наличие символов в квадрате
    if a not in pos_cache or b not in pos_cache:
        return pair  # Возвращаем исходную пару, если символы не найдены

    row_a, col_a = pos_cache[a]
    row_b, col_b = pos_cache[b]

    if row_a == row_b:
        return square[row_a][(col_a - 1) % 5] + square[row_b][(col_b - 1) % 5]
    elif col_a == col_b:
        return square[(row_a - 1) % 5][col_a] + square[(row_b - 1) % 5][col_b]
    else:
        return square[row_a][col_b] + square[row_b][col_a]


def decrypt(ciphertext, square):
    """Расшифровка всего текста с обработкой ошибок"""
    ciphertext = prepare_text(ciphertext)
    if len(ciphertext) % 2 != 0:
        ciphertext += 'X'

    # Создаем кэш позиций
    pos_cache = {square[r][c]: (r, c) for r in range(5) for c in range(5)}

    plaintext = []
    for i in range(0, len(ciphertext), 2):
        pair = ciphertext[i:i + 2]
        decrypted_pair = decrypt_pair(pair, square, pos_cache)
        plaintext.append(decrypted_pair)

    return ''.join(plaintext)


def known_plaintext_attack(ciphertext, known_plain, known_pos=0):
    """Атака на основе известного открытого текста (упрощенная версия)"""
    ciphertext = prepare_text(ciphertext)
    known_plain = prepare_text(known_plain)

    # Создаем случайный квадрат для демонстрации
    # В реальной реализации здесь должен быть анализ пар
    square = build_playfair_square("EXAMPLEKEY")

    return square


if __name__ == "__main__":
    # Зашифрованный текст
    ciphertext = ""

    # Попытка с известным текстом (предположим, что есть "THE")
    known_plain = "Lorem ipsum dolor sit amet consectetur adipisicing elit."

    print("Попытка атаки с известным текстом...")
    square = known_plaintext_attack(ciphertext, known_plain)

    print("\nСгенерированный квадрат Плейфера:")
    for row in square:
        print(' '.join(row))

    print("\nРезультат расшифровки:")
    decrypted = decrypt(ciphertext, square)
    print(decrypted)